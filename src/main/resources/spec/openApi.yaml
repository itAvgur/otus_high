openapi: 3.0.1
info:
  title: OTUS high-load project
  version: 0.0.5
servers:
  - url: http://127.0.0.1:8080
    description: Generated server url
tags:
  - name: Actuator
    description: Monitor and interact
    externalDocs:
      description: Spring Boot Actuator Web API Documentation
      url: https://docs.spring.io/spring-boot/docs/current/actuator-api/html/
paths:
  /post:
    put:
      tags:
        - post-controller
      summary: Update post
      description: Update post
      operationId: updatePost
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
        - post-controller
      summary: Create post
      description: Create new post
      operationId: createNewPost
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /friend/{friendId}:
    put:
      tags:
        - friend-controller
      summary: Set friend
      description: Set new friend
      operationId: addFriend
      parameters:
        - name: friendId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - friend-controller
      summary: Delete friend
      description: Delete friend by id
      operationId: deleteFriendById_1
      parameters:
        - name: friendId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /user/register:
    post:
      tags:
        - user-controller
      summary: Register user
      description: Register user
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /message:
    post:
      tags:
        - message-controller
      summary: Create message
      description: Create message
      operationId: createNewMessage
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSend'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /login:
    post:
      tags:
        - login-controller
      summary: Authenticate user
      description: Authenticate user by login/password, get bearer token
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthenticationRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthenticationDtoResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /user/search:
    get:
      tags:
        - user-controller
      summary: Search users by first/last name
      description: Search users by first and last name
      operationId: searchUsers
      parameters:
        - name: firstName
          in: query
          required: false
          schema:
            type: string
        - name: lastName
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /user/get/{id}:
    get:
      tags:
        - user-controller
      summary: Get user by id
      description: Get user by id
      operationId: getById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: token
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /user/get/all:
    get:
      tags:
        - user-controller
      summary: Get all users
      description: Get all users
      operationId: getAll
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /post/{id}:
    get:
      tags:
        - post-controller
      summary: Get post
      description: Get post by id
      operationId: getPostById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - post-controller
      summary: Delete post
      description: Delete post by id
      operationId: deleteFriendById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /post/feed:
    get:
      tags:
        - post-controller
      summary: Feed post
      description: Get posts of friends
      operationId: feedPost
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /message/{id}:
    get:
      tags:
        - message-controller
      summary: Get message
      description: Get message by id
      operationId: getMessageById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /message/list:
    get:
      tags:
        - message-controller
      summary: Get messages
      description: Get all messages
      operationId: getMessages
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /manage/cache/ready:
    get:
      tags:
        - cache-manager-controller
      summary: Get status of the cache
      description: Return 200 if ready, 202 otherwise
      operationId: getCacheState
      parameters:
        - name: request
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/cacheManagerRequest'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - WARMING
                  - READY
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /actuator:
    get:
      tags:
        - Actuator
      summary: Actuator root web endpoint
      operationId: links
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/Link'
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/Link'
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/Link'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /actuator/health:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'health'
      operationId: health
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
  /actuator/health/**:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'health-path'
      operationId: health-path
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
        '501':
          description: Not Implemented
          content:
            '*/*':
              schema:
                type: object
components:
  schemas:
    Post:
      required:
        - text
      type: object
      properties:
        id:
          type: integer
          format: int32
        text:
          type: string
        authorId:
          type: integer
          format: int32
      description: Post of user
    City:
      required:
        - name
      type: object
      properties:
        name:
          type: string
    Hobby:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
    User:
      required:
        - age
        - firstName
        - gender
        - lastName
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
          format: int32
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        city:
          $ref: '#/components/schemas/City'
        hobbies:
          type: array
          items:
            $ref: '#/components/schemas/Hobby'
      description: User DTO
    UserRegistrationRequest:
      required:
        - User
        - UserLogin
        - UserPassword
      type: object
      properties:
        UserLogin:
          type: string
        UserPassword:
          type: string
        User:
          $ref: '#/components/schemas/User'
      description: User registration request
    MessageSend:
      required:
        - text
        - to
      type: object
      properties:
        text:
          type: string
        to:
          type: string
      description: Message to send from user to user
    MessageResponse:
      required:
        - from
        - id
        - text
        - to
      type: object
      properties:
        id:
          type: integer
          format: int32
        text:
          type: string
        from:
          type: integer
          format: int32
        to:
          type: integer
          format: int32
      description: Message from user to user response
    UserAuthenticationRequest:
      required:
        - login
        - pass
      type: object
      properties:
        login:
          type: string
        pass:
          type: string
      description: User authentication request
    AuthenticationDtoResponse:
      required:
        - token
        - tokenExpired
      type: object
      properties:
        token:
          type: string
          description: Bearer token
        tokenExpired:
          type: string
          description: Expired data
          format: date
    cacheManagerRequest:
      required:
        - cacheName
        - ids
      type: object
      properties:
        cacheName:
          type: string
        ids:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
      description: Request for cache manager
    Link:
      type: object
      properties:
        href:
          type: string
        templated:
          type: boolean
