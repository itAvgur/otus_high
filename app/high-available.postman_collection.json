{
  "info": {
    "_postman_id": "74aa57af-5f1d-478f-bd31-ffbef02f7882",
    "name": "high-available",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "21634154"
  },
  "item": [
    {
      "name": "Register user with empty pass",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.collectionVariables.set(\"id\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"login\": \"{{login}}\",\n    \"pass\": \"\",\n    \"passRepeat\": \"\",\n    \"user\": {\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"age\": {{age}},\n        \"gender\": \"{{gender}}\",\n        \"city\": {\n            \"name\": \"{{city}}\"\n        }\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{host}}:{{port}}/user/register",
          "protocol": "http",
          "host": [
            "{{host}}"
          ],
          "port": "{{port}}",
          "path": [
            "user",
            "register"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Register user with not equal pass",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"JSON test\", () => {",
              "  const responseJson = pm.response.json();",
              "  pm.expect(responseJson.code).to.eql(\"BAD_REQUEST\");",
              "  pm.expect(responseJson.message).to.eql(\"passwords must be equal\");",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"login\": \"{{login}}\",\n    \"pass\": \"{{pass}}\",\n    \"passRepeat\": \"{{pass}}123\",\n    \"user\": {\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"age\": {{age}},\n        \"gender\": \"{{gender}}\",\n        \"city\": {\n            \"name\": \"{{city}}\"\n        }\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{host}}:{{port}}/user/register",
          "protocol": "http",
          "host": [
            "{{host}}"
          ],
          "port": "{{port}}",
          "path": [
            "user",
            "register"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Register user",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let str = \"login_\" + Math.random().toString().substr(2,5)",
              "console.log(str)",
              "pm.collectionVariables.set(\"login\", str)"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"JSON test\", () => {",
              "  const res = pm.response.json();",
              "  pm.expect(res.id).is.not.null;",
              "  pm.expect(res.firstName).to.eql(pm.collectionVariables.get(\"firstName\"));",
              "  pm.expect(res.lastName).to.eql(pm.collectionVariables.get(\"lastName\"));",
              "  pm.expect(res.age).to.eql(parseInt(pm.collectionVariables.get(\"age\")));",
              "  pm.expect(res.gender).to.eql(pm.collectionVariables.get(\"gender\"));",
              "  pm.expect(res.city).to.has.property(\"name\", \"IKT\");",
              "  pm.collectionVariables.set(\"id\", pm.response.json().id)",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"login\": \"{{login}}\",\n    \"pass\": \"{{pass}}\",\n    \"passRepeat\": \"{{pass}}\",\n    \"user\": {\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"age\": {{age}},\n        \"gender\": \"{{gender}}\",\n        \"city\": {\n            \"name\": \"{{city}}\"\n        }\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{host}}:{{port}}/user/register",
          "protocol": "http",
          "host": [
            "{{host}}"
          ],
          "port": "{{port}}",
          "path": [
            "user",
            "register"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Register user again",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"JSON test\", () => {",
              "  const responseJson = pm.response.json();",
              "  pm.expect(responseJson.code).to.eql(\"BAD_REQUEST\");",
              "  pm.expect(responseJson.message).to.eql(\"login is already exists\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"login\": \"{{login}}\",\n    \"pass\": \"{{pass}}\",\n    \"passRepeat\": \"{{pass}}\",\n    \"user\": {\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"age\": {{age}},\n        \"gender\": \"{{gender}}\",\n        \"city\": {\n            \"name\": \"{{city}}\"\n        }\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{host}}:{{port}}/user/register",
          "protocol": "http",
          "host": [
            "{{host}}"
          ],
          "port": "{{port}}",
          "path": [
            "user",
            "register"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get user, no token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{host}}:{{port}}/user/get/{{id}}",
          "protocol": "http",
          "host": [
            "{{host}}"
          ],
          "port": "{{port}}",
          "path": [
            "user",
            "get",
            "{{id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get user, wrong token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{host}}:{{port}}/user/get/{{id}}?token=wrong_token",
          "protocol": "http",
          "host": [
            "{{host}}"
          ],
          "port": "{{port}}",
          "path": [
            "user",
            "get",
            "{{id}}"
          ],
          "query": [
            {
              "key": "token",
              "value": "wrong_token"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "authenticate user not valid pass",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"login\": \"{{login}}\",\n    \"pass\": \"wrong_pass\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{host}}:{{port}}/login",
          "protocol": "http",
          "host": [
            "{{host}}"
          ],
          "port": "{{port}}",
          "path": [
            "login"
          ]
        }
      },
      "response": []
    },
    {
      "name": "authenticate user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "      pm.collectionVariables.set(\"token\", pm.response.json().token)",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"login\": \"{{login}}\",\n    \"pass\": \"{{pass}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{host}}:{{port}}/login",
          "protocol": "http",
          "host": [
            "{{host}}"
          ],
          "port": "{{port}}",
          "path": [
            "login"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get user by id, authenticated",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"JSON test\", () => {",
              "  const res = pm.response.json();",
              "  pm.expect(res.id).to.eql(parseInt(pm.collectionVariables.get(\"id\")));",
              "  pm.expect(res.firstName).to.eql(pm.collectionVariables.get(\"firstName\"));",
              "  pm.expect(res.lastName).to.eql(pm.collectionVariables.get(\"lastName\"));",
              "  pm.expect(res.age).to.eql(parseInt(pm.collectionVariables.get(\"age\")));",
              "  pm.expect(res.gender).to.eql(pm.collectionVariables.get(\"gender\"));",
              "  pm.expect(res.city).to.has.property(\"name\", \"IKT\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "basic",
          "basic": [
            {
              "key": "password",
              "value": "password",
              "type": "string"
            },
            {
              "key": "username",
              "value": "user",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [
          {
            "key": "token",
            "value": "9d20992f-9a68-4128-91ed-7d47330c0aca",
            "type": "text"
          }
        ],
        "url": {
          "raw": "http://{{host}}:{{port}}/user/get/{{id}}?token={{token}}",
          "protocol": "http",
          "host": [
            "{{host}}"
          ],
          "port": "{{port}}",
          "path": [
            "user",
            "get",
            "{{id}}"
          ],
          "query": [
            {
              "key": "token",
              "value": "{{token}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get users",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{host}}:{{port}}/user/get/all",
          "protocol": "http",
          "host": [
            "{{host}}"
          ],
          "port": "{{port}}",
          "path": [
            "user",
            "get",
            "all"
          ],
          "query": [
            {
              "key": "token",
              "value": "da614260-056b-461b-890b-f963d6220650",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "host",
      "value": "127.0.0.1",
      "type": "string"
    },
    {
      "key": "port",
      "value": "8080",
      "type": "string"
    },
    {
      "key": "id",
      "value": "",
      "type": "string"
    },
    {
      "key": "login",
      "value": "login_37310",
      "type": "string"
    },
    {
      "key": "pass",
      "value": "Az123123",
      "type": "string"
    },
    {
      "key": "firstName",
      "value": "Yury",
      "type": "string"
    },
    {
      "key": "lastName",
      "value": "Melnikov",
      "type": "string"
    },
    {
      "key": "age",
      "value": "43",
      "type": "string"
    },
    {
      "key": "gender",
      "value": "MALE",
      "type": "string"
    },
    {
      "key": "city",
      "value": "IKT",
      "type": "string"
    },
    {
      "key": "hobbies",
      "value": "",
      "type": "string"
    },
    {
      "key": "sessionKey",
      "value": "",
      "type": "string"
    },
    {
      "key": "token",
      "value": "0ec0226a-c97f-4d08-8baa-aabab3a631bd",
      "type": "string"
    }
  ]
}